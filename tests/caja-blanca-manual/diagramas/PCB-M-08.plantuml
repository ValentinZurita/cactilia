@startuml
!theme plain
skinparam monochrome true
skinparam shadowing false
skinparam defaultFontName Arial
skinparam ArrowFontSize 11

title Función confirmOrderPayment - Procesamiento de confirmación de pago

start

' 1 - Decisión 1
if (¿Usuario autenticado?) then (No)
  ' 2
  :2. Lanzar error de autenticación;
  stop
else (Sí)
endif

' 3
:3. Extraer orderId y paymentIntentId de request;

' 4 - Decisión 2
if (¿orderId válido?) then (No)
  ' 5
  :5. Lanzar error de argumento inválido;
  stop
else (Sí)
endif

' 6 - Decisión 3
if (¿paymentIntentId válido?) then (No)
  ' 7
  :7. Lanzar error de argumento inválido;
  stop
else (Sí)
endif

partition "Bloque Try" {
  ' 8
  :8. Inicializar cliente Stripe;
  
  ' 9
  :9. Obtener datos de la orden;
  
  ' 10 - Decisión 4
  if (¿Orden existe?) then (No)
    ' 11
    :11. Lanzar error de orden inexistente;
    stop
  else (Sí)
  endif
  
  ' 12 - Decisión 5
  if (¿Orden pertenece al usuario?) then (No)
    ' 13
    :13. Lanzar error de permisos;
    stop
  else (Sí)
  endif
  
  ' 14
  :14. Consultar estado del PaymentIntent en Stripe;
  
  ' 15
  :15. Actualizar registro del PaymentIntent;
  
  ' 16
  :16. Determinar estados según resultado del pago;
  
  ' 17 - Decisión 6 (Switch)
  switch (paymentIntent.status)
    case (succeeded)
      ' 18
      :18. orderStatus = processing, paymentStatus = succeeded;
    case (processing)
      ' 19
      :19. orderStatus = pending, paymentStatus = processing;
    case (requires_payment_method)
      ' 20
      :20. orderStatus = payment_failed, paymentStatus = failed;
    case (requires_action)
      ' 21
      :21. orderStatus = pending, paymentStatus = requires_action;
    case (canceled)
      ' 22
      :22. orderStatus = cancelled, paymentStatus = cancelled;
    case (default)
      ' 23
      :23. orderStatus = pending, paymentStatus = status original;
  endswitch
  
  ' 24
  :24. Actualizar orden con nuevos estados;
  
  ' 25 - Decisión 7
  if (¿Pago exitoso (succeeded)?) then (Sí)
    ' 26
    :26. Actualizar inventario;
    
    ' 27 - Decisión 8
    if (¿Error en actualización?) then (Sí)
      ' 28
      :28. Registrar error y continuar;
    else (No)
    endif
    
    ' 29
    :29. Enviar email de confirmación;
    
    ' 30 - Decisión 9
    if (¿Error en envío de email?) then (Sí)
      ' 31
      :31. Registrar error y continuar;
    else (No)
    endif
  else (No)
    ' 32
    :32. No realizar acciones adicionales;
  endif
  
  ' 33
  :33. Retornar respuesta exitosa;
}

partition "Bloque Catch" {
  ' 34
  :34. Registrar error;
  ' 35
  :35. Lanzar HttpsError;
}

stop

@enduml 