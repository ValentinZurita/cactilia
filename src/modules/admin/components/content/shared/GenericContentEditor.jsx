import React, { useState, useEffect, memo, useCallback, useMemo, useRef } from 'react';
// Import the TinyMCE Editor component
import { Editor } from '@tinymce/tinymce-react';
import { EditorToolbar } from './EditorToolbar';
import { EditorActionBar } from './EditorActionBar';
import { PageMetadataEditor } from './PageMetadataEditor';

/**
 * Editor genérico para páginas con contenido estático simple 
 * (título, descripción, contenido principal).
 *
 * @param {object} props
 * @param {string} props.pageId - ID único de la página (usado para URL de previsualización).
 * @param {object | null} props.initialData - Datos iniciales cargados.
 * @param {function} props.onSave - Callback para guardar borrador.
 * @param {function} props.onPublish - Callback para publicar.
 * @param {boolean} props.isLoading - Indica si hay operación en curso.
 * @param {function} props.onDataChange - Callback para notificar cambios al padre (GenericContentPage).
 * @param {string} [props.contentLabel="Contenido Principal"] - Etiqueta para el área de texto principal.
 * @param {string} [props.contentPlaceholder="Escribe aquí el contenido..."] - Placeholder para el área de texto.
 * @returns {JSX.Element}
 */
export const GenericContentEditor = memo(({
  pageId,
  initialData,
  onSave,
  onPublish,
  isLoading,
  onDataChange,
  contentLabel = "Contenido Principal",
  contentPlaceholder = "Escribe aquí el contenido..."
}) => {
  // Estado local para los datos del editor, inicializado con initialData o un objeto vacío
  const [localData, setLocalData] = useState(initialData || {}); 
  const [isDirty, setIsDirty] = useState(false);
  const editorRef = useRef(null); // Ref for TinyMCE editor instance if needed

  // Sincronizar con initialData si cambia desde fuera (p.ej., después de guardar)
  useEffect(() => {
    if (initialData) {
        const initialJson = JSON.stringify(initialData);
        const localJson = JSON.stringify(localData);
        // Solo actualizar si no hay cambios pendientes O si los datos iniciales son diferentes
        if (!isDirty || initialJson !== localJson) {
            setLocalData(JSON.parse(initialJson));
        }
    }
  }, [initialData, isDirty]);

  // Detectar cambios comparando el estado local con initialData
  useEffect(() => {
    const localJson = JSON.stringify(localData);
    // Compara con initialData original (o un objeto vacío si initialData es null)
    const initialJson = JSON.stringify(initialData || {}); 
    setIsDirty(localJson !== initialJson);
  }, [localData, initialData]);

  // Manejador de cambios genérico para los inputs/textarea (Título, Descripción)
  const handleChange = useCallback((event) => {
    const { name, value } = event.target;
    setLocalData(prevData => {
        const updatedData = { ...prevData, [name]: value };
        // Notificar al componente padre (que usa el hook) del cambio
        if (onDataChange) {
            onDataChange(updatedData);
        }
        return updatedData;
    });
  }, [onDataChange]);

  // Updated Handler for TinyMCE Editor changes
  const handleEditorChange = useCallback((content, editor) => {
    // 'content' is the new HTML generated by TinyMCE
    setLocalData(prevData => {
        const updatedData = { ...prevData, mainContent: content };
        // Notificar al componente padre (que usa el hook) del cambio
        if (onDataChange) {
            onDataChange(updatedData);
        }
        return updatedData;
    });
  }, [onDataChange]);

  // URL de previsualización construida dinámicamente
  const previewUrl = `/${pageId}?preview=true&t=${Date.now()}`;
  const hasSavedContent = useMemo(() => !!initialData?.createdAt, [initialData]);

  // Wrappers para los callbacks de la barra de acciones
  const handleSaveChanges = () => onSave(localData);
  const handlePublishChanges = () => onPublish(localData);

  return (
    <>
      <EditorToolbar previewUrl={previewUrl} hasChanges={isDirty} />

      {/* Editor de Metadatos (Título y Descripción) */}
      <PageMetadataEditor 
        pageTitle={localData.pageTitle}
        pageDescription={localData.pageDescription}
        onChange={handleChange}
        isLoading={isLoading}
      />

      {/* Editor de Contenido Principal - Ahora con TinyMCE */}
      <div className="card mb-4">
        <div className="card-header">{contentLabel}</div>
        <div className="card-body">
          <Editor
            apiKey='YOUR_TINYMCE_API_KEY' // ** IMPORTANT: Replace with your actual API key or use env variable **
            onInit={(evt, editor) => editorRef.current = editor} // Store editor instance if needed
            initialValue={localData.mainContent || ''} // Use initialValue for TinyMCE
            onEditorChange={handleEditorChange} // Use onEditorChange callback
            disabled={isLoading}
            init={{
              height: 500,
              menubar: false,
              plugins: [
                'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',
                'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',
                'insertdatetime', 'media', 'table', 'code', 'help', 'wordcount'
              ],
              toolbar: 'undo redo | blocks | '
                + 'bold italic forecolor | alignleft aligncenter '
                + 'alignright alignjustify | bullist numlist outdent indent | '
                + 'removeformat | help',
              content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',
              placeholder: contentPlaceholder
            }}
          />
        </div>
      </div>

      {/* Barra de Acciones */}
      <EditorActionBar
        onSave={handleSaveChanges}
        onPublish={handlePublishChanges}
        saving={isLoading}
        publishing={isLoading}
        hasChanges={isDirty}
        hasSavedContent={hasSavedContent}
      />
    </>
  );
});

GenericContentEditor.displayName = 'GenericContentEditor'; 