import React, { useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { SectionTitle } from '../ui/SectionTitle';
import ShippingSelector from '../shipping/ShippingSelector';
import { useCart } from '../../../cart/hooks/useCart';

/**
 * Secci√≥n del checkout que muestra las opciones de env√≠o disponibles
 * 
 * @param {Object} props - Propiedades del componente
 * @param {string} props.selectedOptionId - ID de la opci√≥n seleccionada
 * @param {Function} props.onOptionSelect - Funci√≥n para seleccionar una opci√≥n
 * @param {boolean} props.loading - Indica si est√°n cargando las opciones
 * @param {boolean} props.addressSelected - Indica si ya se seleccion√≥ una direcci√≥n
 * @param {string} props.selectedAddressType - Tipo de direcci√≥n seleccionada ('saved' o 'new')
 * @param {Object} props.newAddressData - Datos de la direcci√≥n nueva (si aplica)
 * @param {Object} props.savedAddressData - Datos de la direcci√≥n guardada (si aplica)
 * @param {string} props.error - Mensaje de error (si aplica)
 * @param {Function} props.onCombinationsCalculated - Funci√≥n llamada cuando se calculan las combinaciones
 */
export const ShippingOptionsSection = ({
  selectedOptionId,
  onOptionSelect,
  loading = false,
  addressSelected = false,
  selectedAddressType = 'saved',
  newAddressData = null,
  savedAddressData = null,
  error = null,
  onCombinationsCalculated
}) => {
  // Obtener productos del carrito
  const { items: cartItems } = useCart();
  
  // Verificar si los cartItems est√°n disponibles
  useEffect(() => {
    if (!cartItems || cartItems.length === 0) {
      console.warn('‚ö†Ô∏è No hay productos en el carrito en ShippingOptionsSection');
    } else {
      console.log(`‚úÖ ShippingOptionsSection: ${cartItems.length} productos en carrito`);
    }
  }, [cartItems]);
  
  // Obtener la direcci√≥n apropiada seg√∫n el tipo
  const userAddress = selectedAddressType === 'saved' ? savedAddressData : newAddressData;
  
  // Log para depuraci√≥n de direcci√≥n
  useEffect(() => {
    console.log('üè† ShippingOptionsSection - Direcci√≥n para env√≠o:', userAddress);
    console.log('üè† ShippingOptionsSection - Tipo de direcci√≥n:', selectedAddressType);
    
    if (!userAddress) {
      console.warn('‚ö†Ô∏è No hay direcci√≥n seleccionada para c√°lculo de env√≠os');
    } else if (!userAddress.zip && !userAddress.zipcode) {
      console.warn('‚ö†Ô∏è La direcci√≥n no tiene c√≥digo postal, puede afectar c√°lculo de env√≠os');
    }
  }, [userAddress, selectedAddressType]);
  
  // Referencia para controlar logs √∫nicos
  const loggedRef = useRef(false);
  
  // Log para depuraci√≥n inicial
  useEffect(() => {
    if (!loggedRef.current) {
      console.log('üì¶ Inicializando ShippingOptionsSection con:', { 
        addressSelected, 
        selectedAddressType,
        hasUserAddress: !!userAddress,
        zip: userAddress?.zip || userAddress?.zipcode || 'ninguno'
      });
      loggedRef.current = true;
    }
  }, [addressSelected, selectedAddressType, userAddress]);
  
  // Verificar m√≠nimos necesarios
  if (!addressSelected || !userAddress) {
    return (
      <div className="checkout-section mb-4">
        <SectionTitle
          number="2"
          title="Opciones de env√≠o"
          subtitle="Por favor, seleccione una direcci√≥n de env√≠o primero"
          icon="bi-truck"
        />
        <div className="checkout-section-content p-3 p-md-4 bg-white rounded border">
          <div className="alert alert-warning">
            <i className="bi bi-exclamation-triangle-fill me-2"></i>
            Para calcular opciones de env√≠o, primero debe seleccionar una direcci√≥n.
          </div>
        </div>
      </div>
    );
  }
  
  // Verificar c√≥digo postal
  if (!userAddress.zip && !userAddress.zipcode) {
    return (
      <div className="checkout-section mb-4">
        <SectionTitle
          number="2"
          title="Opciones de env√≠o"
          subtitle="Se requiere c√≥digo postal para calcular env√≠o"
          icon="bi-truck"
        />
        <div className="checkout-section-content p-3 p-md-4 bg-white rounded border">
          <div className="alert alert-warning">
            <i className="bi bi-exclamation-triangle-fill me-2"></i>
            La direcci√≥n seleccionada no tiene un c√≥digo postal v√°lido.
            Por favor, actualice la direcci√≥n o seleccione otra.
          </div>
        </div>
      </div>
    );
  }
  
  // Mostrar error espec√≠fico si existe
  if (error) {
    return (
      <div className="checkout-section mb-4">
        <SectionTitle
          number="2"
          title="Opciones de env√≠o"
          subtitle="Error al calcular opciones"
          icon="bi-truck"
        />
        <div className="checkout-section-content p-3 p-md-4 bg-white rounded border">
          <div className="alert alert-danger">
            <i className="bi bi-exclamation-triangle-fill me-2"></i>
            {error}
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="checkout-section mb-4">
      <SectionTitle
        number="2"
        title="Opciones de env√≠o"
        subtitle={loading ? "Calculando opciones disponibles..." : "Seleccione una opci√≥n para el env√≠o de sus productos"}
        icon="bi-truck"
      />
      <div className="checkout-section-content p-3 p-md-4 bg-white rounded border">
        {loading ? (
          <div className="d-flex flex-column align-items-center justify-content-center py-4">
            <div className="spinner-border text-success mb-3" role="status" style={{ width: '2rem', height: '2rem', borderWidth: '0.2em' }}>
              <span className="visually-hidden">Cargando opciones de env√≠o...</span>
            </div>
            <div className="text-muted">Calculando opciones de env√≠o...</div>
          </div>
        ) : (
          <ShippingSelector
            cartItems={cartItems}
            selectedOptionId={selectedOptionId}
            onOptionSelect={onOptionSelect}
            userAddress={userAddress}
            onCombinationsCalculated={onCombinationsCalculated}
          />
        )}
      </div>
    </div>
  );
};

ShippingOptionsSection.propTypes = {
  selectedOptionId: PropTypes.string,
  onOptionSelect: PropTypes.func.isRequired,
  loading: PropTypes.bool,
  addressSelected: PropTypes.bool,
  selectedAddressType: PropTypes.string,
  newAddressData: PropTypes.object,
  savedAddressData: PropTypes.object,
  error: PropTypes.string,
  onCombinationsCalculated: PropTypes.func
};

export default ShippingOptionsSection; 