import { useState, useEffect, useRef } from 'react';
import { fetchShippingRuleById } from '../../../../admin/shipping/api/shippingApi';
import { groupProductsIntoPackages, calculateTotalShippingCost } from '../../../../checkout/utils/shippingCalculator';

/**
 * Calcula el total de un grupo de productos
 * @param {Array} items - Items del carrito en el grupo
 * @returns {number} - Total del grupo
 */
const calculateGroupTotal = (items) => {
  if (!items || items.length === 0) return 0;
  
  return items.reduce((total, item) => {
    const product = item.product || item;
    const price = parseFloat(product.price || 0);
    const quantity = parseInt(item.quantity || 1, 10);
    return total + (price * quantity);
  }, 0);
};

/**
 * Hook para gestionar las opciones de env√≠o en el checkout
 * Obtiene las reglas de env√≠o desde Firestore y calcula las opciones disponibles
 * @param {Array} cartItems - √çtems del carrito
 * @param {Object} selectedAddressId - Objeto de direcci√≥n seleccionada (guardada)
 * @param {Object} newAddressData - Datos de una nueva direcci√≥n (en proceso)
 * @param {string} selectedAddressType - Tipo de direcci√≥n seleccionada ('saved' o 'new')
 */
export const useShippingOptions = (cartItems, selectedAddressId, newAddressData, selectedAddressType) => {
  const [loading, setLoading] = useState(true);
  const [options, setOptions] = useState([]);
  const [selectedOption, setSelectedOption] = useState(null);
  const [error, setError] = useState(null);
  const [userAddress, setUserAddress] = useState(null);
  // A√±adir estados para grupos y reglas de env√≠o
  const [shippingGroups, setShippingGroups] = useState([]);
  const [shippingRules, setShippingRules] = useState([]);
  // Estado para productos excluidos (sin reglas de env√≠o)
  const [excludedProducts, setExcludedProducts] = useState([]);
  
  // Usar useRef para controlar la inicializaci√≥n y evitar loops
  const optionsLoadedRef = useRef(false);
  const shippingUpdateRef = useRef(null);
  
  // Estados para manejar combinaciones de shippingGroupService
  const [shippingCombinations, setShippingCombinations] = useState([]);
  
  // Obtener direcci√≥n del usuario cuando cambia la direcci√≥n seleccionada
  useEffect(() => {
    const getUserAddress = async () => {
      // Resetear selecci√≥n, opciones y combinaciones cuando cambia la direcci√≥n
      setSelectedOption(null);
      shippingUpdateRef.current = null;
      optionsLoadedRef.current = false;
      setShippingCombinations([]);
      setOptions([]);
      
      // Verificar qu√© tipo de direcci√≥n est√° seleccionada
      if (selectedAddressType === 'saved') {
        // Direcci√≥n guardada
        if (!selectedAddressId) {
          setUserAddress(null);
          return;
        }
        
        // Aqu√≠ normalmente obtendr√≠amos la direcci√≥n de Firestore
        // Pero para simplificar, asumimos que ya tenemos la direcci√≥n en el componente padre
        // y que selectedAddressId es en realidad el objeto direcci√≥n completo
        setUserAddress(selectedAddressId);
        console.log('üè† Direcci√≥n guardada seleccionada:', selectedAddressId);
      } 
      else if (selectedAddressType === 'new') {
        // Nueva direcci√≥n - verificar si est√° completa
        if (!newAddressData) {
          setUserAddress(null);
          return;
        }
        
        // Validar que los campos obligatorios est√©n completos
        const requiredFields = ['street', 'city', 'state', 'zip'];
        const isComplete = requiredFields.every(field => 
          newAddressData[field] && newAddressData[field].trim() !== ''
        );
        
        if (isComplete) {
          // La direcci√≥n nueva est√° completa
          console.log('üè† Nueva direcci√≥n completa:', newAddressData);
          setUserAddress(newAddressData);
        } else {
          // La direcci√≥n nueva no est√° completa
          console.log('‚ö†Ô∏è Nueva direcci√≥n incompleta - datos actuales:', newAddressData);
          setUserAddress(null);
          
          // Limpiar opciones y establecer mensaje
          setOptions([]);
          setSelectedOption(null);
          setError('Complete su direcci√≥n para ver opciones de env√≠o');
        }
      }
      else {
        // No hay tipo de direcci√≥n seleccionado
        setUserAddress(null);
      }
      
      // Al cambiar la direcci√≥n, reiniciamos la opci√≥n seleccionada
      // para forzar una nueva evaluaci√≥n basada en la nueva direcci√≥n
      setSelectedOption(null);
    };
    
    getUserAddress();
  }, [selectedAddressId, newAddressData, selectedAddressType]);
  
  // Calcular opciones de env√≠o cuando cambian los items o la direcci√≥n
  useEffect(() => {
    const calculateShippingOptions = async () => {
      console.log('üöö Calculando opciones de env√≠o...');
      setLoading(true);
      setError(null);
      
      // Validar que tengamos items
      if (!cartItems || cartItems.length === 0) {
        setOptions([]);
        setShippingGroups([]);
        setShippingRules([]);
        setExcludedProducts([]);
        setLoading(false);
        return;
      }
      
      try {
        // 1. Agrupar productos por regla de env√≠o (esto se hace siempre, incluso sin direcci√≥n)
        const shippingGroups = [];
        const processedRules = new Map(); // Map para evitar duplicados
        const allRules = []; // Para almacenar todas las reglas de env√≠o
        const excluded = []; // Para almacenar productos sin reglas de env√≠o
        const nationalRuleId = "fyfkhfITejBjMASFCMZ2"; // ID de la regla nacional
        
        // Recorrer cada item y procesarlo
        for (const item of cartItems) {
          const product = item.product || item;
          
          // Obtener reglas de env√≠o (m√∫ltiples o √∫nica)
          const ruleIds = product.shippingRuleIds && Array.isArray(product.shippingRuleIds) 
            ? product.shippingRuleIds 
            : (product.shippingRuleId ? [product.shippingRuleId] : []);
          
          if (ruleIds.length === 0) {
            console.warn(`Producto ${product.name || product.id} no tiene reglas de env√≠o`);
            excluded.push({...product, quantity: item.quantity});
            continue;
          }
          
          // Verificar si el producto tiene asignada espec√≠ficamente la regla nacional
          const hasNationalRule = ruleIds.includes(nationalRuleId);
          
          // Procesar todas las reglas disponibles
          for (const ruleId of ruleIds) {
            // Si ya procesamos esta regla, a√±adir el producto al grupo existente y continuar
            if (processedRules.has(ruleId)) {
              const groupIndex = processedRules.get(ruleId);
              
              // Verificar si este producto ya est√° en el grupo para evitar duplicaciones
              const productAlreadyInGroup = shippingGroups[groupIndex].items.some(
                groupItem => (groupItem.id === item.id || (groupItem.product && groupItem.product.id === product.id))
              );
              
              if (!productAlreadyInGroup) {
                shippingGroups[groupIndex].items.push(item);
              }
              continue;
            }
            
            // Obtener regla desde Firestore
            let ruleData;
            
            try {
              ruleData = await fetchShippingRuleById(ruleId);
              
              if (!ruleData) {
                console.error(`Regla de env√≠o ${ruleId} no encontrada`);
                continue;
              }
              
              // Almacenar la regla en el array de todas las reglas si no existe ya
              if (!allRules.some(rule => rule.id === ruleId)) {
                allRules.push({
                  id: ruleId,
                  ...ruleData
                });
              }
            } catch (err) {
              console.error(`Error al obtener regla ${ruleId}:`, err);
              continue;
            }
            
            // Crear nuevo grupo con esta regla
            const groupIndex = shippingGroups.length;
            shippingGroups.push({
              id: `group-${ruleId}`,
              name: ruleData.zona || 'Grupo de env√≠o',
              rule: ruleData,
              rules: [ruleData],
              items: [item]
            });
            
            // Marcar esta regla como procesada
            processedRules.set(ruleId, groupIndex);
          }
          
          // Si despu√©s de procesar todas las reglas, el producto no est√° en ning√∫n grupo, considerarlo excluido
          if (!shippingGroups.some(group => 
            group.items.some(groupItem => 
              groupItem.id === item.id || (groupItem.product && groupItem.product.id === product.id)
            )
          )) {
            excluded.push({...product, quantity: item.quantity});
          }
        }
        
        // Actualizar el estado de productos excluidos
        setExcludedProducts(excluded);
        
        // Actualizar el estado de los grupos y reglas (esto se hace siempre)
        console.log(`‚úÖ Grupos de env√≠o: ${shippingGroups.length}, Reglas: ${allRules.length}`);
        setShippingGroups(shippingGroups);
        setShippingRules(allRules);
        
        // Si no hay grupos v√°lidos, no hay opciones de env√≠o
        if (shippingGroups.length === 0) {
          console.warn('No se encontraron reglas de env√≠o v√°lidas para ning√∫n producto');
          setError('Los productos en tu carrito no tienen opciones de env√≠o disponibles');
          setOptions([]);
          setLoading(false);
          return;
        }
        
        // Verificar si hay direcci√≥n para calcular opciones de env√≠o concretas
        // Aceptar tanto zipCode como zip
        const hasValidPostalCode = userAddress && (userAddress.zipCode || userAddress.zip);
        
        if (!userAddress) {
          console.warn('‚ö†Ô∏è No hay direcci√≥n seleccionada para calcular opciones de env√≠o');
          setError('Se requiere una direcci√≥n para calcular el env√≠o');
          setOptions([]);
          setLoading(false);
          return;
        }
        
        if (!hasValidPostalCode) {
          console.warn('‚ö†Ô∏è Direcci√≥n sin c√≥digo postal v√°lido');
          setError('Se requiere un c√≥digo postal v√°lido para calcular el env√≠o');
          setOptions([]);
          setLoading(false);
          return;
        }
        
        // Obtener los datos necesarios de la direcci√≥n
        const postalCode = userAddress.zipCode || userAddress.zip;
        const state = userAddress.state || userAddress.estado;
        const city = userAddress.city || userAddress.ciudad;
        
        console.log(`üèôÔ∏è Validando opciones para CP: ${postalCode}, Estado: ${state}, Ciudad: ${city}`);
        
        // Filtrar grupos seg√∫n la direcci√≥n (validar reglas por c√≥digo postal)
        const validGroups = shippingGroups.filter(group => {
          // Validar si la regla aplica para esta direcci√≥n
          const rule = group.rule;
          const zipcodes = rule.zipcodes || [];
          
          // Mostrar informaci√≥n de la regla para diagn√≥stico
          console.log(`‚ö†Ô∏è Validando regla: ${rule.id}`, {
            zona: rule.zona,
            zipcodes: zipcodes.slice(0, 5), // Mostrar solo los primeros 5 para no saturar la consola
            totalZipcodes: zipcodes.length,
            userState: state,
            userZip: postalCode,
            ruleId: rule.id
          });
          
          // Verificar si la regla es la nacional y conservarla solo si est√° asignada espec√≠ficamente
          if (rule.id === nationalRuleId) {
            // Si es la regla nacional espec√≠fica, permitirla siempre
            console.log('üìç Regla nacional espec√≠fica aplicada (ID expl√≠cito)');
            return true;
          }
          
          // 1. Verificar si hay coincidencia exacta con el CP
          if (zipcodes.includes(postalCode)) {
            console.log(`üìç Match exacto de CP ${postalCode} para regla ${rule.id}`);
            return true;
          }
          
          // 2. Verificar si la regla incluye el t√©rmino "nacional"
          const isNationalRule = 
            zipcodes.some(z => z && z.toLowerCase() === 'nacional') || 
            (rule.zipcode && rule.zipcode.toLowerCase() === 'nacional') ||
            (rule.zona && rule.zona.toLowerCase() === 'nacional');
          
          // Si es regla nacional, permitirla
          if (isNationalRule) {
            console.log('üìç Regla nacional aplicada');
            return true;
          }
          
          // 3. Verificar coincidencia por estado (m√°s casos de coincidencia)
          // Primero verificar en campo estados si existe
          const stateMatches = rule.estados && Array.isArray(rule.estados) && 
            rule.estados.some(ruleState => 
              ruleState && state && ruleState.toLowerCase() === state.toLowerCase()
            );
          
          if (stateMatches) {
            console.log(`üìç Match de estado ${state} para regla ${rule.id}`);
            return true;
          }

          // Tambi√©n verificar si el estado coincide con la zona (para compatibilidad con formatos antiguos)
          if (rule.zona && state && rule.zona.toLowerCase().includes(state.toLowerCase())) {
            console.log(`üìç Match de estado con zona: ${state} incluido en zona ${rule.zona}`);
            return true;
          }
          
          // Tambi√©n verificar si la zona est√° incluida en el estado (caso inverso)
          if (rule.zona && state && state.toLowerCase().includes(rule.zona.toLowerCase())) {
            console.log(`üìç Match de zona incluida en estado: ${rule.zona} incluido en ${state}`);
            return true;
          }
          
          // Tambi√©n verificar si el estado est√° incluido en los zipcodes como una opci√≥n
          if (state && zipcodes.some(zip => zip && zip.toLowerCase() === state.toLowerCase())) {
            console.log(`üìç Match de estado incluido en zipcodes: ${state}`);
            return true;
          }
          
          // 4. Verificar coincidencia por primera secci√≥n del c√≥digo postal (primeros 2 d√≠gitos)
          if (postalCode && postalCode.length >= 2) {
            const postalPrefix = postalCode.substring(0, 2);
            const prefixMatches = zipcodes.some(zip => 
              zip && zip.length >= 2 && zip.substring(0, 2) === postalPrefix
            );
            
            if (prefixMatches) {
              console.log(`üìç Match de prefijo postal ${postalPrefix} para regla ${rule.id}`);
              return true;
            }
          }
          
          // 5. Verificar si la regla incluye rangos de c√≥digos postales
          const hasPostalRanges = rule.rangosCP && Array.isArray(rule.rangosCP) && rule.rangosCP.length > 0;
          
          if (hasPostalRanges && postalCode) {
            const numericPostal = parseInt(postalCode, 10);
            
            if (!isNaN(numericPostal)) {
              const rangeMatch = rule.rangosCP.some(range => {
                const min = parseInt(range.min, 10);
                const max = parseInt(range.max, 10);
                
                return !isNaN(min) && !isNaN(max) && 
                  numericPostal >= min && numericPostal <= max;
              });
              
              if (rangeMatch) {
                console.log(`üìç Match de rango postal para CP ${postalCode} en regla ${rule.id}`);
                return true;
              }
            }
          }
          
          // Si llegamos aqu√≠, la regla no aplica para esta direcci√≥n
          console.log(`‚ùå No hay match para CP ${postalCode} con regla ${rule.id}`);
          return false;
        });
        
        // Si no hay grupos v√°lidos despu√©s de filtrar, mostrar mensaje
        if (validGroups.length === 0) {
          console.warn('‚ö†Ô∏è No hay grupos de env√≠o disponibles para la direcci√≥n seleccionada');
          setError('No hay opciones de env√≠o disponibles para tu direcci√≥n');
          setOptions([]);
          setLoading(false);
          return;
        }
        
        console.log(`üì¶ Grupos de env√≠o v√°lidos para CP ${postalCode}: ${validGroups.length}`);
        
        // Crear opciones de env√≠o a partir de los grupos v√°lidos
        const allOptions = [];
        
        // Recorrer cada grupo v√°lido y generar opciones
        for (const group of validGroups) {
          // Verificar si es una regla nacional
          const rule = group.rule;
          const isNationalRule = rule.id === nationalRuleId || 
            (rule.zipcodes && rule.zipcodes.some(z => z && z.toLowerCase() === 'nacional')) || 
            (rule.zipcode && rule.zipcode.toLowerCase() === 'nacional');
          
          // Para reglas nacionales, verificar que el producto tenga esta regla espec√≠ficamente asignada
          if (isNationalRule) {
            // Solo crear opciones para grupos que tienen asignada esta regla espec√≠ficamente
            console.log(`üåé Aplicando regla nacional para grupo: ${group.id}`);
          }
          
          // Obtener opciones del grupo
          const opciones = rule.opciones_mensajeria || [];
          
          if (opciones.length === 0) {
            console.warn(`‚ö†Ô∏è Grupo ${group.id} no tiene opciones de mensajer√≠a configuradas`);
            continue;
          }
          
          // Recorrer cada opci√≥n del grupo
          opciones.forEach(opcion => {
            // Verificar si la opci√≥n es v√°lida
            if (!opcion || !opcion.precio) return;
            
            // Crear datos de opci√≥n
            const optionId = `${group.id}-${opcion.nombre || 'default'}`;
            
            // Calcular si el env√≠o es gratis seg√∫n condiciones
            const isFreeShipping = rule.envio_gratis === true || 
              (rule.envio_gratis_monto_minimo && 
               parseInt(rule.envio_gratis_monto_minimo) > 0 && 
               calculateGroupTotal(group.items) >= parseInt(rule.envio_gratis_monto_minimo));
            
            // Calcular costo total del grupo
            const groupTotal = calculateGroupTotal(group.items);
            
            // Crear objeto de opci√≥n
            const option = {
              id: optionId,
              groupId: group.id,
              label: `${rule.zona || 'Env√≠o'} - ${opcion.nombre || 'Est√°ndar'}`,
              carrier: opcion.nombre || 'Mensajer√≠a',
              minDays: opcion.minDays || 1,
              maxDays: opcion.maxDays || 5,
              calculatedCost: isFreeShipping ? 0 : parseFloat(opcion.precio || 0),
              totalCost: isFreeShipping ? 0 : parseFloat(opcion.precio || 0),
              price: isFreeShipping ? 0 : parseFloat(opcion.precio || 0),
              isFreeShipping,
              tiempoEntrega: opcion.tiempo_entrega || `${opcion.minDays || 1}-${opcion.maxDays || 5} d√≠as`,
              details: rule.zona ? `Env√≠o a ${rule.zona}` : 'Opci√≥n de env√≠o',
              isNationalRule
            };
            
            // Si el env√≠o es gratuito, modificar la etiqueta
            if (isFreeShipping) {
              option.label = `${option.label} (Gratis)`;
            }
            
            allOptions.push(option);
          });
        }
        
        // Si no hay opciones disponibles despu√©s de todo el proceso
        if (allOptions.length === 0) {
          setError('Los productos en tu carrito no tienen opciones de env√≠o disponibles para tu direcci√≥n. Por favor, contacta a servicio al cliente o selecciona otra direcci√≥n de entrega.');
          setOptions([]);
          setLoading(false);
          return;
        }
        
        // Ordenar opciones por precio (m√°s barata primero)
        const sortedOptions = allOptions.sort((a, b) => {
          // Primero ordenar por env√≠o gratuito
          if (a.isFreeShipping && !b.isFreeShipping) return -1;
          if (!a.isFreeShipping && b.isFreeShipping) return 1;
          
          // Luego por precio
          return a.totalCost - b.totalCost;
        });
        
        console.log(`üöö Opciones calculadas: ${sortedOptions.length}`);
        setOptions(sortedOptions);
        
        // Marcar que las opciones han sido cargadas
        optionsLoadedRef.current = true;
        
        // Si hay una opci√≥n seleccionada y ya no est√° disponible, deseleccionarla
        if (selectedOption && !sortedOptions.some(opt => opt.id === selectedOption.id)) {
          setSelectedOption(null);
        }
      } catch (err) {
        console.error('Error al calcular opciones de env√≠o:', err);
        setError('Error al calcular opciones de env√≠o');
      } finally {
        setLoading(false);
      }
    };
    
    calculateShippingOptions();
  }, [cartItems, userAddress]);
  
  // Manejar la selecci√≥n autom√°tica de la primera opci√≥n una sola vez cuando las opciones est√©n disponibles
  useEffect(() => {
    // Solo ejecutar esto una vez cuando las opciones est√©n disponibles y no haya ninguna seleccionada
    if (options.length > 0 && !selectedOption && !loading && optionsLoadedRef.current) {
      // Usar una referencia para evitar llamar esto m√∫ltiples veces
      if (!shippingUpdateRef.current) {
        console.log('üîÑ Seleccionando autom√°ticamente la opci√≥n m√°s econ√≥mica (ejecuci√≥n √∫nica)');
        
        // Marcar que ya hemos hecho una selecci√≥n autom√°tica para este conjunto de opciones
        shippingUpdateRef.current = 'autoselected';
        
        // Seleccionar la opci√≥n m√°s econ√≥mica
        const cheapestOption = [...options].sort((a, b) => 
          (a.totalCost || a.calculatedCost || 9999) - (b.totalCost || b.calculatedCost || 9999)
        )[0];
        
        if (cheapestOption) {
          setSelectedOption(cheapestOption);
        }
      }
    } else if (options.length === 0 || loading) {
      // Reset the ref when options change or are loading
      shippingUpdateRef.current = null;
    }
  }, [options, selectedOption, loading]);
  
  // Cuando cambie la direcci√≥n, reiniciar completamente las opciones
  useEffect(() => {
    if (userAddress) {
      console.log('üìÆ Direcci√≥n cambiada:', userAddress);
      // Al cambiar de direcci√≥n, limpiar opciones seleccionadas
      setSelectedOption(null);
      setShippingCombinations([]);
      setLoading(true);
      
      // Reiniciar referencias para manejar la selecci√≥n inicial
      optionsLoadedRef.current = false;
    }
  }, [userAddress]);
  
  /**
   * Procesa las combinaciones de env√≠o para estandarizarlas
   * @param {Array} combinations - Combinaciones de env√≠o
   * @returns {Array} Opciones de env√≠o procesadas
   */
  const processShippingOptions = (combinations) => {
    console.log('üîÑ Procesando', combinations.length, 'combinaciones de env√≠o');
    
    if (!combinations || !Array.isArray(combinations) || combinations.length === 0) {
      console.warn('‚ö†Ô∏è No hay combinaciones para procesar');
      return [];
    }
    
    return combinations.map(combination => {
      // Obtener el precio para asegurar que siempre exista
      const optionPrice = combination.totalPrice || 0;
      
      // Crear formato est√°ndar para cada combinaci√≥n
      return {
        id: combination.id,
        label: combination.description || 'Opci√≥n de env√≠o',
        totalCost: optionPrice,
        calculatedCost: optionPrice,
        price: optionPrice, // A√±adir campo price para compatibilidad
        isFreeShipping: combination.isAllFree || false,
        selections: combination.selections || [],
        carrier: (combination.selections && combination.selections.length > 1) 
          ? 'Combinado' 
          : (combination.selections?.[0]?.option?.carrier || 'Servicio de env√≠o'),
        details: `${combination.selections?.length || 1} grupo(s) de env√≠o`
      };
    });
  };

  // Cuando calculamos nuevas combinaciones, reemplazar completamente las anteriores
  const updateShippingCombinations = (combinations) => {
    console.log('üîÑ Actualizando combinaciones de env√≠o:', combinations.length);
    
    // Para diagn√≥stico: guardar IDs actuales
    const currentIds = shippingCombinations.map(c => c.id);
    console.log('üîë IDs de combinaciones actuales:', currentIds);
    
    // Asegurar que las combinaciones tengan IDs consistentes basados en su contenido
    const processedCombinations = combinations.map(combination => {
      // Crear un ID consistente basado en el contenido de la combinaci√≥n
      // Esto ayuda a que el mismo grupo y opci√≥n mantengan el mismo ID
      if (!combination.stableId) {
        const groupsSignature = combination.selections?.map(s => 
          `${s.groupId}-${s.option?.carrier || 'carrier'}`
        ).join('_') || 'single';
        
        // Usar parte del ID original pero a√±adir una firma estable
        const stableId = `${combination.id.split('-')[0]}-${groupsSignature}`;
        combination.stableId = stableId;
        
        console.log(`üîë ID estable generado: ${stableId} para combinaci√≥n ${combination.id}`);
      }
      
      return {
        ...combination,
        // Sobrescribir el ID con uno estable
        id: combination.stableId
      };
    });
    
    // Mostrar nuevos IDs
    console.log('üîë IDs de combinaciones nuevas:', processedCombinations.map(c => c.id));
    
    // Limpiar opciones anteriores completamente - esto evita que persistan opciones
    // que ya no son v√°lidas para la direcci√≥n actual
    setShippingCombinations(processedCombinations);
    setOptions([]);
    
    if (processedCombinations.length === 0) {
      console.warn('‚ö†Ô∏è No se encontraron opciones de env√≠o disponibles');
      setError('No hay opciones de env√≠o disponibles para esta direcci√≥n');
      setLoading(false);
      return;
    }

    // Procesar las nuevas combinaciones
    const processedOptions = processShippingOptions(processedCombinations);
    setOptions(processedOptions);
    
    // Limpiar la selecci√≥n anterior, ya que las opciones han cambiado
    setSelectedOption(null);
    
    setLoading(false);
    
    console.log('‚úÖ Opciones de env√≠o actualizadas:', processedOptions.length);
  };
  
  // Funci√≥n para seleccionar una opci√≥n
  const selectShippingOption = (option) => {
    // Si recibimos un objeto en lugar de ID, extraer el ID
    const optionId = option?.id || option;
    
    if (!optionId) {
      console.warn('‚ö†Ô∏è Intento de seleccionar una opci√≥n de env√≠o sin ID');
      return;
    }
    
    console.log('üîÑ Opci√≥n de env√≠o seleccionada:', optionId);
    
    // Imprimir opciones disponibles para diagn√≥stico
    console.log('üìã Opciones est√°ndar disponibles:', options.map(o => ({ id: o.id, price: o.totalCost })));
    console.log('üìã Combinaciones disponibles:', shippingCombinations.map(c => ({ id: c.id, price: c.totalPrice })));
    
    // Primero verificar si la opci√≥n sigue siendo v√°lida con la direcci√≥n actual
    const isInCurrentOptions = options.some(opt => opt.id === optionId);
    const isInCombinations = shippingCombinations.some(combo => combo.id === optionId);
    
    // Verificaci√≥n m√°s flexible para opciones entre direcciones - buscar por nombre/descripci√≥n
    let matchingCombination = null;
    if (!isInCurrentOptions && !isInCombinations) {
      // Buscar coincidencia aproximada por descripci√≥n si tenemos el objeto completo
      if (option.description || option.name) {
        const searchText = (option.description || option.name || '').toLowerCase();
        console.log('üîé Buscando coincidencia por descripci√≥n:', searchText);
        
        // Extraer palabras clave de la descripci√≥n
        const keywords = searchText
          .replace(/\([^)]*\)/g, '') // Eliminar contenido entre par√©ntesis
          .split(/[^a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö]+/) // Dividir por no-letras
          .filter(word => word.length > 3) // Filtrar palabras significativas
          .map(word => word.toLowerCase());
        
        console.log('üîë Palabras clave:', keywords);
        
        // Primera b√∫squeda: coincidencia exacta
        matchingCombination = shippingCombinations.find(combo => 
          combo.description && searchText && 
          combo.description.toLowerCase() === searchText
        );
        
        // Segunda b√∫squeda: coincidencia parcial
        if (!matchingCombination) {
          matchingCombination = shippingCombinations.find(combo => {
            if (!combo.description) return false;
            const comboText = combo.description.toLowerCase();
            // Buscar si el texto de b√∫squeda contiene la descripci√≥n o viceversa
            return comboText.includes(searchText) || searchText.includes(comboText);
          });
        }
        
        // Tercera b√∫squeda: coincidencia por palabras clave
        if (!matchingCombination && keywords.length > 0) {
          matchingCombination = shippingCombinations.find(combo => {
            if (!combo.description) return false;
            const comboText = combo.description.toLowerCase();
            // Verificar si al menos 2 palabras clave coinciden
            return keywords.filter(keyword => comboText.includes(keyword)).length >= 1;
          });
        }
        
        if (matchingCombination) {
          console.log('‚úÖ Encontrada combinaci√≥n similar:', matchingCombination.id);
        }
      }
      
      // Si no encontramos coincidencia, mantener la selecci√≥n del usuario en lugar de reemplazarla
      if (!matchingCombination) {
        // Solo registrar un mensaje, pero no cambiar la selecci√≥n
        if (shippingCombinations.length > 0) {
          console.log('‚ö†Ô∏è No se encontr√≥ coincidencia exacta, pero mantenemos la selecci√≥n del usuario');
          // Crear un objeto de opci√≥n basado en la selecci√≥n del usuario
          const userSelection = {
            id: optionId,
            label: option.description || option.name || 'Opci√≥n de env√≠o seleccionada',
            totalCost: option.totalPrice || option.totalCost || option.calculatedCost || 0,
            calculatedCost: option.totalPrice || option.totalCost || option.calculatedCost || 0,
            price: option.totalPrice || option.totalCost || option.calculatedCost || option.price || 0,
            isFreeShipping: option.isAllFree || option.isFreeShipping || false,
            selections: option.selections || [],
            carrier: option.carrier || 'Servicio de env√≠o',
            details: option.details || `Opci√≥n seleccionada por el usuario`
          };
          
          setSelectedOption(userSelection);
          return;
        } else if (options.length > 0) {
          console.log('‚ö†Ô∏è No hay combinaciones disponibles, pero mantenemos la selecci√≥n si es posible');
          // Si tenemos opciones est√°ndar pero no combinaciones, podemos usar esas
          if (option && (option.id || option.description)) {
            const userSelection = {
              id: optionId,
              label: option.description || option.name || 'Opci√≥n de env√≠o',
              totalCost: option.totalPrice || option.totalCost || 0,
              calculatedCost: option.calculatedCost || option.totalCost || 0,
              price: option.totalPrice || option.totalCost || option.calculatedCost || option.price || 0,
              isFreeShipping: option.isAllFree || option.isFreeShipping || false,
              carrier: option.carrier || 'Servicio de env√≠o'
            };
            setSelectedOption(userSelection);
          } else {
            // Solo como √∫ltimo recurso usar la primera opci√≥n
            const firstOption = options[0];
            setSelectedOption(firstOption);
          }
          return;
        } else {
          console.error('‚ùå Error: No hay opciones disponibles para esta direcci√≥n');
          return;
        }
      }
    }
    
    // Si encontramos una combinaci√≥n por coincidencia aproximada, usarla
    if (matchingCombination) {
      console.log(`üí∞ Usando combinaci√≥n similar: $${matchingCombination.totalPrice || 0}`);
      
      // Adaptar la combinaci√≥n al formato esperado
      const adaptedOption = {
        id: matchingCombination.id,
        label: matchingCombination.description || 'Opci√≥n de env√≠o',
        totalCost: matchingCombination.totalPrice || 0,
        calculatedCost: matchingCombination.totalPrice || 0,
        price: matchingCombination.totalPrice || 0,
        isFreeShipping: matchingCombination.isAllFree,
        selections: matchingCombination.selections || [],
        carrier: 'Combinado',
        details: `Opci√≥n de env√≠o (${matchingCombination.selections?.length || 1} grupos)`
      };
      
      setSelectedOption(adaptedOption);
      return;
    }
    
    // Seguir con el flujo normal si la opci√≥n existe
    // Primero intentar encontrar la opci√≥n en las combinaciones externas
    if (shippingCombinations.length > 0) {
      const selectedCombination = shippingCombinations.find(combo => combo.id === optionId);
      
      if (selectedCombination) {
        console.log(`üí∞ Costo de env√≠o (combinaci√≥n): $${selectedCombination.totalPrice || 0}`);
        
        // Adaptar la combinaci√≥n al formato esperado por el resto del sistema
        const adaptedOption = {
          id: selectedCombination.id,
          label: selectedCombination.description || 'Opci√≥n de env√≠o',
          totalCost: selectedCombination.totalPrice || 0,
          calculatedCost: selectedCombination.totalPrice || 0,
          price: selectedCombination.totalPrice || 0,
          isFreeShipping: selectedCombination.isAllFree,
          selections: selectedCombination.selections || [],
          // A√±adir campos necesarios para el resto del sistema
          carrier: 'Combinado',
          details: `Opci√≥n de env√≠o (${selectedCombination.selections?.length || 1} grupos)`
        };
        
        setSelectedOption(adaptedOption);
        return;
      }
    }
    
    // Si no est√° en las combinaciones, buscar en las opciones tradicionales
    const selectedOpt = options.find(opt => opt.id === optionId);
    
    if (selectedOpt) {
      console.log(`üí∞ Costo de env√≠o: $${selectedOpt.totalCost || selectedOpt.calculatedCost || 0}`);
      setSelectedOption(selectedOpt);
    } else {
      console.warn(`‚ö†Ô∏è No se encontr√≥ la opci√≥n con ID: ${optionId}`);
      console.log('Opciones disponibles:', options.map(o => ({ id: o.id, price: o.totalCost })));
      console.log('Combinaciones disponibles:', shippingCombinations.map(c => ({ id: c.id, price: c.totalPrice })));
    }
  };
  
  return {
    loading,
    error,
    options,
    selectedOption,
    selectShippingOption,
    updateShippingCombinations,
    shippingCombinations,
    // Exponer grupos y reglas para el componente de diagn√≥stico
    shippingGroups,
    shippingRules,
    excludedProducts
  };
}; 