import { useState, useEffect } from 'react';
import { fetchShippingRuleById } from '../../../../admin/shipping/api/shippingApi';
import { groupProductsIntoPackages, calculateTotalShippingCost } from '../../../../checkout/utils/shippingCalculator';

/**
 * Hook para gestionar las opciones de env√≠o en el checkout
 * Obtiene las reglas de env√≠o desde Firestore y calcula las opciones disponibles
 */
export const useShippingOptions = (cartItems, selectedAddressId) => {
  const [loading, setLoading] = useState(true);
  const [options, setOptions] = useState([]);
  const [selectedOption, setSelectedOption] = useState(null);
  const [error, setError] = useState(null);
  const [userAddress, setUserAddress] = useState(null);
  // A√±adir estados para grupos y reglas de env√≠o
  const [shippingGroups, setShippingGroups] = useState([]);
  const [shippingRules, setShippingRules] = useState([]);
  // Estado para productos excluidos (sin reglas de env√≠o)
  const [excludedProducts, setExcludedProducts] = useState([]);
  
  // Obtener direcci√≥n del usuario cuando cambia el ID seleccionado
  useEffect(() => {
    const getUserAddress = async () => {
      if (!selectedAddressId) {
        setUserAddress(null);
        return;
      }
      
      // Aqu√≠ normalmente obtendr√≠amos la direcci√≥n de Firestore
      // Pero para simplificar, asumimos que ya tenemos la direcci√≥n en el componente padre
      // y que selectedAddressId es en realidad el objeto direcci√≥n completo
      setUserAddress(selectedAddressId);

      // Debuggear qu√© estamos recibiendo como direcci√≥n
      console.log('üè† Direcci√≥n seleccionada:', selectedAddressId);
      
      // Al cambiar la direcci√≥n, reiniciamos la opci√≥n seleccionada
      // para forzar una nueva evaluaci√≥n basada en la nueva direcci√≥n
      setSelectedOption(null);
    };
    
    getUserAddress();
  }, [selectedAddressId]);
  
  // Calcular opciones de env√≠o cuando cambian los items o la direcci√≥n
  useEffect(() => {
    const calculateShippingOptions = async () => {
      console.log('üöö Calculando opciones de env√≠o...');
      setLoading(true);
      setError(null);
      
      // Validar que tengamos items
      if (!cartItems || cartItems.length === 0) {
        setOptions([]);
        setShippingGroups([]);
        setShippingRules([]);
        setExcludedProducts([]);
        setLoading(false);
        return;
      }
      
      try {
        // 1. Agrupar productos por regla de env√≠o (esto se hace siempre, incluso sin direcci√≥n)
        const shippingGroups = [];
        const processedRules = new Map(); // Map para evitar duplicados
        const allRules = []; // Para almacenar todas las reglas de env√≠o
        const excluded = []; // Para almacenar productos sin reglas de env√≠o
        
        // Recorrer cada item y procesarlo
        for (const item of cartItems) {
          const product = item.product || item;
          
          // Obtener reglas de env√≠o (m√∫ltiples o √∫nica)
          const ruleIds = product.shippingRuleIds && Array.isArray(product.shippingRuleIds) 
            ? product.shippingRuleIds 
            : (product.shippingRuleId ? [product.shippingRuleId] : []);
          
          if (ruleIds.length === 0) {
            console.warn(`Producto ${product.name || product.id} no tiene reglas de env√≠o`);
            excluded.push({...product, quantity: item.quantity});
            continue;
          }
          
          // Procesar todas las reglas disponibles
          for (const ruleId of ruleIds) {
            // Si ya procesamos esta regla, a√±adir el producto al grupo existente y continuar
            if (processedRules.has(ruleId)) {
              const groupIndex = processedRules.get(ruleId);
              
              // Verificar si este producto ya est√° en el grupo para evitar duplicaciones
              const productAlreadyInGroup = shippingGroups[groupIndex].items.some(
                groupItem => (groupItem.id === item.id || (groupItem.product && groupItem.product.id === product.id))
              );
              
              if (!productAlreadyInGroup) {
                shippingGroups[groupIndex].items.push(item);
              }
              continue;
            }
            
            // Obtener regla desde Firestore
            let ruleData;
            
            try {
              ruleData = await fetchShippingRuleById(ruleId);
              
              if (!ruleData) {
                console.error(`Regla de env√≠o ${ruleId} no encontrada`);
                continue;
              }
              
              // Almacenar la regla en el array de todas las reglas si no existe ya
              if (!allRules.some(rule => rule.id === ruleId)) {
                allRules.push({
                  id: ruleId,
                  ...ruleData
                });
              }
            } catch (err) {
              console.error(`Error al obtener regla ${ruleId}:`, err);
              continue;
            }
            
            // Crear nuevo grupo con esta regla
            const groupIndex = shippingGroups.length;
            shippingGroups.push({
              id: `group-${ruleId}`,
              name: ruleData.zona || 'Grupo de env√≠o',
              rule: ruleData,
              rules: [ruleData],
              items: [item]
            });
            
            // Marcar esta regla como procesada
            processedRules.set(ruleId, groupIndex);
          }
          
          // Si despu√©s de procesar todas las reglas, el producto no est√° en ning√∫n grupo, considerarlo excluido
          if (!shippingGroups.some(group => 
            group.items.some(groupItem => 
              groupItem.id === item.id || (groupItem.product && groupItem.product.id === product.id)
            )
          )) {
            excluded.push({...product, quantity: item.quantity});
          }
        }
        
        // Actualizar el estado de productos excluidos
        setExcludedProducts(excluded);
        
        // Actualizar el estado de los grupos y reglas (esto se hace siempre)
        console.log(`‚úÖ Grupos de env√≠o: ${shippingGroups.length}, Reglas: ${allRules.length}`);
        setShippingGroups(shippingGroups);
        setShippingRules(allRules);
        
        // Si no hay grupos v√°lidos, no hay opciones de env√≠o
        if (shippingGroups.length === 0) {
          console.warn('No se encontraron reglas de env√≠o v√°lidas para ning√∫n producto');
          setError('Los productos en tu carrito no tienen opciones de env√≠o disponibles');
          setOptions([]);
          setLoading(false);
          return;
        }
        
        // Verificar si hay direcci√≥n para calcular opciones de env√≠o concretas
        // Aceptar tanto zipCode como zip
        const hasValidPostalCode = userAddress && (userAddress.zipCode || userAddress.zip);
        
        if (!userAddress) {
          console.warn('‚ö†Ô∏è No hay direcci√≥n seleccionada para calcular opciones de env√≠o');
          setError('Se requiere una direcci√≥n para calcular el env√≠o');
          setOptions([]);
          setLoading(false);
          return;
        }
        
        if (!hasValidPostalCode) {
          console.warn('‚ö†Ô∏è Direcci√≥n sin c√≥digo postal v√°lido');
          setError('Se requiere un c√≥digo postal v√°lido para calcular el env√≠o');
          setOptions([]);
          setLoading(false);
          return;
        }
        
        // Obtener los datos necesarios de la direcci√≥n
        const postalCode = userAddress.zipCode || userAddress.zip;
        const state = userAddress.state || userAddress.estado;
        const city = userAddress.city || userAddress.ciudad;
        
        console.log(`üèôÔ∏è Validando opciones para CP: ${postalCode}, Estado: ${state}, Ciudad: ${city}`);
        
        // Filtrar grupos seg√∫n la direcci√≥n (validar reglas por c√≥digo postal)
        const validGroups = shippingGroups.filter(group => {
          // Validar si la regla aplica para esta direcci√≥n
          const rule = group.rule;
          const zipcodes = rule.zipcodes || [];
          
          // 1. Verificar si hay coincidencia exacta con el CP
          if (zipcodes.includes(postalCode)) {
            console.log(`‚úÖ Regla ${rule.zona} aplica por coincidencia exacta de CP: ${postalCode}`);
            return true;
          }
          
          // 2. Verificar si la regla incluye el estado
          if (state && zipcodes.some(zip => zip.toLowerCase() === state.toLowerCase())) {
            console.log(`‚úÖ Regla ${rule.zona} aplica por coincidencia de estado: ${state}`);
            return true;
          }
          
          // 3. Verificar si la regla es nacional (incluye 'nacional', 'todos', 'all' o '*')
          const nationalKeywords = ['nacional', 'todos', 'all', '*'];
          if (zipcodes.some(zip => nationalKeywords.includes(zip.toLowerCase()))) {
            console.log(`‚úÖ Regla ${rule.zona} aplica porque es nacional`);
            return true;
          }
          
          // Si llegamos aqu√≠, la regla no aplica para esta direcci√≥n
          console.log(`‚ùå Regla ${rule.zona} NO aplica para CP: ${postalCode}, Estado: ${state}`);
          return false;
        });
        
        // Actualizar los grupos de env√≠o con solo los grupos v√°lidos
        if (validGroups.length === 0) {
          console.warn('No hay reglas de env√≠o aplicables para esta direcci√≥n');
          setError('No hay opciones de env√≠o disponibles para tu direcci√≥n');
          setOptions([]);
          setLoading(false);
          return;
        }
        
        console.log(`‚úÖ ${validGroups.length} de ${shippingGroups.length} grupos aplican para esta direcci√≥n`);
        
        // 2. Para cada grupo V√ÅLIDO, calcular opciones de env√≠o
        const allOptions = [];
        
        for (const group of validGroups) {
          // Calcular peso y cantidad total del grupo
          let totalWeight = 0;
          let totalQuantity = 0;
          
          for (const item of group.items) {
            const product = item.product || item;
            const weight = parseFloat(product.weight || 1);
            const quantity = parseInt(item.quantity || 1);
            
            totalWeight += weight * quantity;
            totalQuantity += quantity;
          }
          
          group.totalWeight = totalWeight;
          group.totalQuantity = totalQuantity;
          
          // Procesar cada m√©todo de env√≠o de la regla
          if (group.rule.opciones_mensajeria && Array.isArray(group.rule.opciones_mensajeria)) {
            for (const [methodIndex, method] of group.rule.opciones_mensajeria.entries()) {
              // Extraer datos del m√©todo
              const methodId = `${group.rule.id}-${method.nombre?.replace(/\s+/g, '-')?.toLowerCase() || 'method'}-${methodIndex}`;
              const methodPrice = parseFloat(method.precio || 0);
              
              // Extraer configuraci√≥n de paquetes
              const configPaquetes = method.configuracion_paquetes || {};
              const maxWeight = parseFloat(configPaquetes.peso_maximo_paquete || 20);
              const extraWeightCost = parseFloat(configPaquetes.costo_por_kg_extra || 10);
              const maxItems = parseInt(configPaquetes.maximo_productos_por_paquete || 10);
              
              // Configurar opci√≥n de env√≠o
              const shippingOption = {
                id: methodId,
                ruleId: group.rule.id,
                ruleName: group.rule.zona || 'Env√≠o',
                carrier: method.nombre || 'Servicio',
                label: method.label || method.nombre || 'Env√≠o',
                price: methodPrice,
                tiempo_entrega: method.tiempo_entrega || '3-5 d√≠as',
                minDays: parseInt(method.minDays || 3),
                maxDays: parseInt(method.maxDays || 5),
                maxPackageWeight: maxWeight,
                extraWeightCost: extraWeightCost,
                maxProductsPerPackage: maxItems
              };
              
              // Calcular paquetes necesarios
              const packages = groupProductsIntoPackages(group.items, shippingOption);
              
              // Calcular costo total
              const totalCost = calculateTotalShippingCost(packages, shippingOption);
              
              // Verificar env√≠o gratuito (si aplica)
              const subtotal = group.items.reduce((sum, item) => {
                const price = parseFloat((item.product || item).price || 0);
                const quantity = parseInt(item.quantity || 1);
                return sum + (price * quantity);
              }, 0);
              
              const isFreeShipping = 
                group.rule.envio_gratis || 
                (group.rule.envio_gratis_monto_minimo && subtotal >= parseFloat(group.rule.envio_gratis_monto_minimo));
              
              // A√±adir opci√≥n a la lista
              allOptions.push({
                ...shippingOption,
                calculatedCost: isFreeShipping ? 0 : totalCost,
                totalCost: isFreeShipping ? 0 : totalCost,
                packages,
                isFreeShipping,
                details: `${method.tiempo_entrega || '3-5 d√≠as'} (${isFreeShipping ? 'Gratis' : `$${totalCost.toFixed(2)}`})`,
                groupInfo: {
                  id: group.id,
                  items: group.items,
                  totalWeight,
                  totalQuantity
                }
              });
            }
          }
        }
        
        // Si no hay opciones disponibles despu√©s de todo el proceso
        if (allOptions.length === 0) {
          setError('No hay opciones de env√≠o disponibles para tu direcci√≥n');
          setOptions([]);
          setLoading(false);
          return;
        }
        
        // Ordenar opciones por precio (m√°s barata primero)
        const sortedOptions = allOptions.sort((a, b) => {
          // Primero ordenar por env√≠o gratuito
          if (a.isFreeShipping && !b.isFreeShipping) return -1;
          if (!a.isFreeShipping && b.isFreeShipping) return 1;
          
          // Luego por precio
          return a.totalCost - b.totalCost;
        });
        
        console.log(`üöö Opciones calculadas: ${sortedOptions.length}`);
        setOptions(sortedOptions);
        
        // Si hay una opci√≥n seleccionada y ya no est√° disponible, deseleccionarla
        if (selectedOption && !sortedOptions.some(opt => opt.id === selectedOption.id)) {
          setSelectedOption(null);
        }
      } catch (err) {
        console.error('Error al calcular opciones de env√≠o:', err);
        setError('Error al calcular opciones de env√≠o');
      } finally {
        setLoading(false);
      }
    };
    
    calculateShippingOptions();
  }, [cartItems, userAddress]);
  
  // Funci√≥n para seleccionar una opci√≥n
  const selectShippingOption = (option) => {
    if (option) {
      setSelectedOption(option);
    }
  };
  
  return {
    loading,
    error,
    options,
    selectedOption,
    selectShippingOption,
    // Exponer grupos y reglas para el componente de diagn√≥stico
    shippingGroups,
    shippingRules,
    excludedProducts
  };
}; 