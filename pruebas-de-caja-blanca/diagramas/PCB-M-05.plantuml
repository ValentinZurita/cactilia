@startuml
!theme plain
skinparam monochrome true
skinparam shadowing false
skinparam defaultFontName Arial
skinparam ArrowFontSize 11

title Gestión de cantidades en carrito (increaseQuantity)

start

' 1 - Validación inicial de ID
if (¿productId válido?) then (No)
  :1. Retornar error;
  note right: { success: false, message: 'ID de producto no válido' }
  stop
else (Sí)
endif

' 2 - Verificación de bloqueo
:2. Verificar bloqueo operaciones;
note right: Previene múltiples operaciones rápidas

' 3 - Buscar producto en carrito
:3. Buscar item en carrito;

' 4 - Verificar si existe el producto
if (¿Item encontrado?) then (No)
  :4. Retornar error;
  note right: { success: false, message: 'Producto no encontrado en el carrito' }
  stop
else (Sí)
endif

' 5 - Actualización optimista
:5. Actualizar UI inmediatamente;
note right: dispatch(updateQuantity())

' 6 - Marcar como bloqueado
:6. Activar bloqueo temporal;

' 7 - Iniciar proceso asíncrono
:7. Iniciar setTimeout;

' 8 - Bloque try
partition "Proceso asíncrono (setTimeout)" {
  ' 9 - Verificar stock actual
  :9. Obtener stock real;
  note right: getUpdatedProductStock()

  ' 10 - Decisión stock suficiente
  if (¿Cantidad > stock?) then (Sí)
    ' 11 - Ajustar cantidad si supera el stock
    :11. Ajustar a stock máximo;
    note right: dispatch(updateQuantity())
  else (No)
    ' 12 - No se requiere ajuste
    :12. Mantener cantidad;
  endif

  ' 13 - Decisión usuario autenticado
  if (¿Usuario autenticado?) then (Sí)
    ' 14 - Sincronizar carrito
    :14. Sincronizar con servidor;
    note right: syncCartWithServer()
  else (No)
    ' 15 - No sincronizar
    :15. Solo local;
  endif
  
  ' 16 - Liberar bloqueo en finally
  :16. Liberar bloqueo;
}

' 17 - Retornar éxito inmediato
:17. Retornar éxito;
note right: { success: true }

stop

@enduml